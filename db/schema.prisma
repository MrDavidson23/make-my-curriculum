// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  lastName       String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  phone String?

  tokens   Token[]
  sessions Session[]
  //custom fields

  location            String?
  photo               String?
  birthDate           DateTime?
  profession          String
  references          Reference[]
  publications        Publication[]
  technicalEducations TechnicalEducation[]
  academicEducations  AcademicEducation[]
  laboralExperiences  LaboralExperience[]

}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Phone {
  id          Int    @id @default(autoincrement())
  phoneNumber String
}

model IdentificationType {
  id   Int    @id @default(autoincrement())
  type String
}

model Skill {
  id          Int    @id @default(autoincrement())
  description String
}

model Language {
  id         Int          @id @default(autoincrement())
  language   String
  Curriculum Curriculum[]
}

model Template {
  id        Int     @id @default(autoincrement())
  name      String
  isPremium Boolean
  design    String

  Curriculum Curriculum[]
}

model Curriculum {
  id   Int    @id @default(autoincrement())
  name String

  language   Language @relation(fields: [languageId], references: [id])
  languageId Int

  template   Template @relation(fields: [templateId], references: [id])
  templateId Int
}

model Reference {
  id          Int    @id @default(autoincrement())
  email       String
  phone       String
  name        String
  institution String

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Publication {
  id          Int      @id @default(autoincrement())
  name        String
  location    String
  date        DateTime
  institution String
  tag         String

  User   User @relation(fields: [UserId], references: [id])
  UserId Int
}

model TechnicalEducation {
  id             Int      @id @default(autoincrement())
  studies        String
  location       String
  completionYear DateTime
  institution    String

  User   User @relation(fields: [UserId], references: [id])
  UserId Int
}

model AcademicEducation {
  id          Int      @id @default(autoincrement())
  studies     String
  location    String
  startYear   DateTime
  finishYear  DateTime
  institution String

  User   User @relation(fields: [UserId], references: [id])
  UserId Int
}

model LaboralExperience {
  id          Int      @id @default(autoincrement())
  position    String
  location    String
  startYear   DateTime
  finishYear  String
  institution String
  startMonth  String
  finishMonth String

  User   User @relation(fields: [UserId], references: [id])
  UserId Int
}
